#
# This Job runs the epi application once until the seedsBackup has been generated and stores in a ConfigMap.
#
# Details:
# The pod consists of an initContainer and a "main" container which share a temporary volume.
# A dedicated ServiceAccount with write permissions to the ConfigMap containing the seedsBackup is used by the pod.
# 1. The epi application runs in the initContainer as background process. 
#    A foreground process regularly checks if the seedBackup file has been written to the mounted temporary volume.
#    Then the process exists and the init container stops.
# 2. The "main" container starts and writes the content of the seedBackup file into a ConfigMap.
#    It has the permission doing so via the ServiceAccount
#
apiVersion: batch/v1
kind: Job
metadata:
  name: {{ include "epi.fullname" . }}-init
  labels:
    {{- include "epi.labels" . | nindent 4 }}
spec:
  backoffLimit: 1
  template:
    spec:
      {{- with .Values.imagePullSecrets }}
      imagePullSecrets:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      # Use the init ServiceAccount which has permissions to write to configMap
      serviceAccountName: {{ include "epi.fullname" . }}-init
      {{- with .Values.podSecurityContext }}
      securityContext:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      restartPolicy: Never
      initContainers:
      - name: init-epi
        image: "{{ .Values.image.repository }}:{{ .Values.image.tag | default .Chart.AppVersion }}"
        imagePullPolicy: {{ .Values.image.pullPolicy | default "IfNotPresent" }}
        {{- with .Values.securityContext }}
        securityContext:
          {{- toYaml . | nindent 10 }}
        {{- end }}
        {{- with .Values.resources }}
        resources:
          {{- toYaml . | nindent 10 }}
        {{- end }}
        command:
          - sh
          - -c
          # 1. Check if build process needs to be done
          # 2. If yes: Start server in background, run build, then create markerfile and copy seedBackup to shared folder with main container
          - cd /ePI-workspace; 
            if [ ! -f /ePI-workspace/apihub-root/external-volume/domains/$IMAGE_TAG ]; 
            then 
              echo "=======> Not build yet!"; 
              echo "=======> Starting application in background process ..."; 
              (npm run server &); 
              echo "=======> Sleeping for 10s ..."; 
              sleep 10s; 
              echo "=======> Starting build process ..."; 
              npm run build-all; 
              rc=$?; 
              echo "=======> Build process done - rc=$rc"; 
              if [ $rc -eq 0 ]; then 
                echo "=======> Writing marker file that build process was successfully for version $IMAGE_TAG ..."; 
                touch /ePI-workspace/apihub-root/external-volume/domains/$IMAGE_TAG; 
                echo "=======> Copying seedsBackup to container-shared-data ..."; 
                cp /ePI-workspace/apihub-root/seedsBackup /container-shared-data; 
              fi 
            else 
              echo "=======> Already built for version=$IMAGE_TAG"; 
            fi; 
            echo "=======> Exiting ..."; 
            exit 0; 
        env:
          - name: IMAGE_TAG
            value: "{{ .Values.image.tag | default .Chart.AppVersion }}"
        volumeMounts:
          - name: epi-external-volume
            mountPath: /ePI-workspace/apihub-root/external-volume
          - name: epi-config-volume
            mountPath: /ePI-workspace/apihub-root/external-volume/config/apihub.json
            subPath: apihub.json
          - name: epi-bdns-config-volume
            mountPath: /ePI-workspace/apihub-root/external-volume/config/bdns.hosts
            subPath: bdns.hosts
          - name: epi-config-volume
            mountPath: /ePI-workspace/env.json
            subPath: env.json
          - name: epi-domains-volume
            mountPath: /ePI-workspace/apihub-root/external-volume/config/domains/{{ required "config.domain must be set" .Values.config.domain }}.json
            subPath: {{ required "config.domain must be set" .Values.config.domain }}.json
          - name: epi-domains-volume
            mountPath: /ePI-workspace/apihub-root/external-volume/config/domains/{{ required "config.subDomain must be set" .Values.config.subDomain }}.json
            subPath: {{ required "config.subDomain must be set" .Values.config.subDomain }}.json
          - name: epi-domains-volume
            mountPath: /ePI-workspace/apihub-root/external-volume/config/domains/{{ required "config.vaultDomain must be set" .Values.config.vaultDomain }}.json
            subPath: {{ required "config.vaultDomain must be set" .Values.config.vaultDomain }}.json
          - name: epi-env-volume
            mountPath: /ePI-workspace/trust-loader-config/demiurge-wallet/loader/environment.js
            subPath: demiurge-environment.js
          - name: epi-env-volume
            mountPath: /ePI-workspace/trust-loader-config/dsu-explorer/loader/environment.js
            subPath: dsu-explorer-environment.js
          - name: epi-env-volume
            mountPath: /ePI-workspace/trust-loader-config/dsu-fabric-wallet/loader/environment.js
            subPath: dsu-fabric-environment.js
          - name: epi-env-volume
            mountPath: /ePI-workspace/trust-loader-config/leaflet-wallet/loader/environment.js
            subPath: leaflet-environment.js
            # We mount a temporary volume in order to hand over data from init to main container
          - name: container-shared-data
            mountPath: /container-shared-data
      containers:
      - name: write-configmap
        image: "{{ .Values.initJob.kubectlImage.repository }}:{{ .Values.initJob.kubectlImage.tag }}"
        imagePullPolicy: {{ .Values.image.pullPolicy | default "IfNotPresent" }}
        command:
          - sh
          - -c
          # If seedsBackup file exists, apply Kubernetes ConfigMap from it.
          - if [ -f /container-shared-data/seedsBackup ]; 
            then 
              echo "=======> Writing or updating ConfigMap {{ include "epi.configMapSeedsBackupName" . }} ..." ;
              kubectl create configmap {{ include "epi.configMapSeedsBackupName" . }} --from-file=seedsBackup=/container-shared-data/seedsBackup --dry-run=client -o yaml | kubectl apply -f -; 
            else 
              echo "=======> SeedsBackup file not present! Kubernetes ConfigMap was not created or updated!"; 
            fi; 
        volumeMounts:
          - name: container-shared-data
            mountPath: /container-shared-data
      volumes:
        - name: epi-config-volume
          configMap:
            name: {{ include "epi.fullname" . }}-config
        - name: epi-bdns-config-volume
          configMap:
            name: {{ include "epi.fullname" . }}-bdns
        - name: epi-domains-volume
          configMap:
            name: {{ include "epi.fullname" . }}-domains
        - name: epi-env-volume
          configMap:
            name: {{ include "epi.fullname" . }}-environment
        - name: epi-external-volume
          persistentVolumeClaim:
            claimName:  {{ include "epi.fullname" . }}
          # Extra volume for passing data (seedsBackup) from initContainer to main container
          # aka sharing data, see https://www.stratoscale.com/blog/kubernetes/kubernetes-how-to-share-disk-storage-between-containers-in-a-pod/
        - name: container-shared-data
          emptyDir: {}
      {{- with .Values.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
