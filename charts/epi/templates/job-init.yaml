{{- /*
1. Create Configmaps required for hook from template
*/}}

{{- include "epi.configmap-bdns" (list $ . "-init" (dict "helm.sh/hook" "pre-install,pre-upgrade" "helm.sh/hook-delete-policy" "before-hook-creation,hook-succeeded,hook-failed" "helm.sh/hook-weight" "-1")) }}
---
{{- include "epi.configmap-config" (list $ . "-init" (dict "helm.sh/hook" "pre-install,pre-upgrade" "helm.sh/hook-delete-policy" "before-hook-creation,hook-succeeded,hook-failed" "helm.sh/hook-weight" "-1")) }}
---
{{- include "epi.configmap-domains" (list $ . "-init" (dict "helm.sh/hook" "pre-install,pre-upgrade" "helm.sh/hook-delete-policy" "before-hook-creation,hook-succeeded,hook-failed" "helm.sh/hook-weight" "-1")) }}
---
{{- include "epi.configmap-environment" (list $ . "-init" (dict "helm.sh/hook" "pre-install,pre-upgrade" "helm.sh/hook-delete-policy" "before-hook-creation,hook-succeeded,hook-failed" "helm.sh/hook-weight" "-1")) }}
---

{{- /*
2. Role, RoleBinding and ServiceAccount for Init Job
*/}}
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: {{ include "epi.fullname" . }}-init
  annotations:
    "description": "Role for Init Job to create or update SeedsBackup ConfigMap"
    "helm.sh/hook": pre-install,pre-upgrade
    "helm.sh/hook-delete-policy": before-hook-creation,hook-succeeded,hook-failed
    "helm.sh/hook-weight": "-1"
rules:
- apiGroups:
  - ""
  resourceNames:
  - {{ include "epi.configMapSeedsBackupName" . | quote }}
  resources:
  - configmaps
  verbs:
  - get
  - patch
  - update
# We cannot restrict create verb to a resourceName - See https://github.com/kubernetes/kubernetes/issues/80295
- apiGroups:
  - ""
  resources:
  - configmaps
  verbs:
  - create
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: {{ include "epi.fullname" . }}-init
  annotations:
    "description": "RoleBinding for Init Job to create or update SeedsBackup ConfigMap"
    "helm.sh/hook": pre-install,pre-upgrade
    "helm.sh/hook-delete-policy": before-hook-creation,hook-succeeded,hook-failed
    "helm.sh/hook-weight": "-1"
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: {{ include "epi.fullname" . }}-init
subjects:
- kind: ServiceAccount
  name: {{ include "epi.fullname" . }}-init
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: {{ include "epi.fullname" . }}-init
  labels:
    {{- include "epi.labels" . | nindent 4 }}
  annotations:
    "description": "ServiceAccount for Init Job to create or update SeedsBackup ConfigMap"
    "helm.sh/hook": pre-install,pre-upgrade
    "helm.sh/hook-delete-policy": before-hook-creation,hook-succeeded,hook-failed
    "helm.sh/hook-weight": "-1"
---

{{- /*
3. This Job starts the apihub, then starts the build process. 
   After build process completion the seedsBackup ConfigMap will updated.

Details:
The pod consists of an initContainer and a "main" container which share a temporary volume.
A dedicated ServiceAccount with write permissions to the ConfigMap containing the seedsBackup is used by the pod.
1. The apiHub/epi application runs in the initContainer as background process. 
   After a short delay (10s) the build process starts and writes the seedsBackup to the mounted temporary volume share with the "main" container.
   Then the process exists and the init container stops.
2. The "main" container starts and writes the content of the seedBackup file into a ConfigMap.
   It has the permission doing so via the ServiceAccount

*/}}
apiVersion: batch/v1
kind: Job
metadata:
  name: {{ include "epi.fullname" . }}-init
  annotations:
    "description": "Init Job for creating or updating SeedsBackup ConfigMap"
    "helm.sh/hook": pre-install,pre-upgrade
    "helm.sh/hook-delete-policy": before-hook-creation
    "helm.sh/hook-weight": "0"
spec:
  backoffLimit: 1
  template:
    spec:
      {{- with .Values.imagePullSecrets }}
      imagePullSecrets:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      # Use the init ServiceAccount which has permissions to write to configMap
      serviceAccountName: {{ include "epi.fullname" . }}-init
      {{- with .Values.podSecurityContext }}
      securityContext:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      restartPolicy: Never
      initContainers:
      - name: init-epi
        image: "{{ .Values.image.repository }}:{{ .Values.image.tag | default .Chart.AppVersion }}"
        imagePullPolicy: {{ .Values.image.pullPolicy | default "IfNotPresent" }}
        {{- with .Values.securityContext }}
        securityContext:
          {{- toYaml . | nindent 10 }}
        {{- end }}
        {{- with .Values.resources }}
        resources:
          {{- toYaml . | nindent 10 }}
        {{- end }}
        command:
          - sh
          - -c
        args:
          - |
            # 1. Check if build process needs to be done by checking if build process has not been executed in the past for current Image Tag.
            # 2. If yes: Start server in background, run build, then create markerfile and copy seedBackup to shared folder with main container
            cd /ePI-workspace
            if [ ! -f /ePI-workspace/apihub-root/external-volume/domains/${IMAGE_TAG} ]
            then 
              echo "=======> Not build yet!"
              echo "=======> Copying seedsBackupOnStartup to seedsBackup ..."
              cp apihub-root/seedsBackupOnStartup apihub-root/seedsBackup
              echo "=======> Starting application in background process ..."
              npm run server &
              server_pid=$!
              echo "=======> Application running in background with PID=$server_pid"
              echo "=======> Sleeping for 10s ..."
              sleep 10s
              echo "=======> Starting build process ..."
              npm run build-all
              rc=$?
              echo "=======> Build process done - rc=$rc"
              if [ $rc -eq 0 ]
              then 
                echo "=======> Build process successful - Writing marker file for version $IMAGE_TAG ..."
                touch /ePI-workspace/apihub-root/external-volume/domains/$IMAGE_TAG
                echo "=======> Copying seedsBackup to container-shared-data ..."
                cp /ePI-workspace/apihub-root/seedsBackup /container-shared-data
                ls -las /container-shared-data
              else
                echo "=======> ERROR during build process - Exiting with rc=$rc ..."
                exit $rc
              fi
            else
              echo "=======> Already built for version=$IMAGE_TAG"
            fi
            echo "=======> Exiting ..."
            exit 0
        env:
          - name: IMAGE_TAG
            value: "{{ .Values.image.tag | default .Chart.AppVersion }}-{{ .Values.image.tag | default .Chart.AppVersion }}"
        volumeMounts:
          # As of Feb-2023 we do NOT mount seedsBackup to its desired destination /ePI-workspace/apihub-root/seedsBackup
          # as the startup build process will write to that even if there are no changes.
          # Thus, we mount it to different location and copy it to desired location where the file is writeable then.
          - name: epi-seeds-volume
            mountPath: /ePI-workspace/apihub-root/seedsBackupOnStartup
            subPath: seedsBackup
            readOnly: true
          - name: epi-external-volume
            mountPath: /ePI-workspace/apihub-root/external-volume
          - name: epi-config-volume
            mountPath: /ePI-workspace/apihub-root/external-volume/config/apihub.json
            subPath: apihub.json
            readOnly: true
          - name: epi-bdns-config-volume
            mountPath: /ePI-workspace/apihub-root/external-volume/config/bdns.hosts
            subPath: bdns.hosts
            readOnly: true
          - name: epi-config-volume
            mountPath: /ePI-workspace/env.json
            subPath: env.json
            readOnly: true
          - name: epi-domains-volume
            mountPath: /ePI-workspace/apihub-root/external-volume/config/domains/{{ required "config.domain must be set" .Values.config.domain }}.json
            subPath: {{ required "config.domain must be set" .Values.config.domain }}.json
            readOnly: true
          - name: epi-domains-volume
            mountPath: /ePI-workspace/apihub-root/external-volume/config/domains/{{ required "config.subDomain must be set" .Values.config.subDomain }}.json
            subPath: {{ required "config.subDomain must be set" .Values.config.subDomain }}.json
            readOnly: true
          - name: epi-domains-volume
            mountPath: /ePI-workspace/apihub-root/external-volume/config/domains/{{ required "config.vaultDomain must be set" .Values.config.vaultDomain }}.json
            subPath: {{ required "config.vaultDomain must be set" .Values.config.vaultDomain }}.json
            readOnly: true
          - name: epi-env-volume
            mountPath: /ePI-workspace/trust-loader-config/demiurge-wallet/loader/environment.js
            subPath: demiurge-environment.js
            readOnly: true
          - name: epi-env-volume
            mountPath: /ePI-workspace/trust-loader-config/dsu-explorer/loader/environment.js
            subPath: dsu-explorer-environment.js
            readOnly: true
          - name: epi-env-volume
            mountPath: /ePI-workspace/trust-loader-config/dsu-fabric-wallet/loader/environment.js
            subPath: dsu-fabric-environment.js
            readOnly: true
          - name: epi-env-volume
            mountPath: /ePI-workspace/trust-loader-config/leaflet-wallet/loader/environment.js
            subPath: leaflet-environment.js
            readOnly: true
            # We mount a temporary volume in order to hand over data from init to main container
          - name: container-shared-data
            mountPath: /container-shared-data
      containers:
      - name: write-configmap
        image: "{{ .Values.initJob.kubectlImage.repository }}:{{ .Values.initJob.kubectlImage.tag }}"
        imagePullPolicy: {{ .Values.initJob.kubectlImage.pullPolicy | default "IfNotPresent" }}
        command:
          - sh
          - -c
        args:
          - |
            # If seedsBackup file exists, apply Kubernetes ConfigMap from it.
            if [ -f /container-shared-data/seedsBackup ]
            then 
              backupname="{{ include "epi.configMapSeedsBackupName" . }}-${IMAGE_TAG}-$(date +%s)"
              echo "=======> Writing Backup ConfigMap $backupname ..."
              kubectl create configmap $backupname --from-file=seedsBackup=/container-shared-data/seedsBackup
              echo "=======> Writing or updating ConfigMap {{ include "epi.configMapSeedsBackupName" . }} ..."
              kubectl create configmap {{ include "epi.configMapSeedsBackupName" . }} --from-file=seedsBackup=/container-shared-data/seedsBackup --dry-run=client -o yaml | kubectl apply -f -
            else
              echo "=======> SeedsBackup file not present! Kubernetes ConfigMap was not created or updated!"
            fi
        env:
          - name: IMAGE_TAG
            value: "{{ .Values.image.tag | default .Chart.AppVersion }}-{{ .Values.image.tag | default .Chart.AppVersion }}"
        volumeMounts:
          - name: container-shared-data
            mountPath: /container-shared-data
            readOnly: true
      volumes:
        - name: epi-seeds-volume
          configMap:
            name: {{ include "epi.configMapSeedsBackupName" . }}
        - name: epi-config-volume
          configMap:
            name: {{ include "epi.fullname" . }}-config-init
        - name: epi-bdns-config-volume
          configMap:
            name: {{ include "epi.fullname" . }}-bdns-init
        - name: epi-domains-volume
          configMap:
            name: {{ include "epi.fullname" . }}-domains-init
        - name: epi-env-volume
          configMap:
            name: {{ include "epi.fullname" . }}-environment-init
        - name: epi-external-volume
          persistentVolumeClaim:
            claimName:  {{ include "epi.fullname" . }}
          # Extra volume for passing data (seedsBackup) from initContainer to main container
          # aka sharing data, see https://www.stratoscale.com/blog/kubernetes/kubernetes-how-to-share-disk-storage-between-containers-in-a-pod/
        - name: container-shared-data
          emptyDir:
            sizeLimit: "10Mi"
      {{- with .Values.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
